{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAEaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYA,OACI,sBAAMC,SARW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAoBO,OACtCN,EAAc,MAIlB,SACI,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAbpB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAYZM,GAZY,4CAAH,sDCEPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAElC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKA,UAAU,MAAMC,IAAKf,EAAKgB,IAAKN,IACpC,4BAAIA,QCHHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEtB,ECJwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAbAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAAAC,GACnBC,YAAW,WACPJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAEd,UAGR,CAACpB,IAGGqB,EDd0BM,CAAa3B,GAAjCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAoDhB,KACnDoB,GAAa,mBAAGJ,UAAU,mCAAb,yBACd,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAC,GACP,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEXxCiB,EAAe,WAGxB,MAAoC1C,mBAAS,CAAC,gBAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAGA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAIA,6BAEQ4C,EAAWpB,KAAI,SAAAT,GACd,OAAQ,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MChB3C8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.7805c68d.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from \"prop-types\";\r\nexport const AddCategory = ({ setcategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setcategories(cats => [ inputValue,...cats]);\r\n            setInputValue('');\r\n        } \r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setcategories: PropTypes.func.isRequired\r\n}\r\n\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=228bpVvfKq1f8Eck0Ck7qJ2JW4hwSIWs`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img className=\"img\" src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__fadeIn'> {category}</h3>\r\n            {loading  &&  <p className=\"animate__animated animate__flash\">Cargando...</p>}\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(img => {\r\n                        return <GifGridItem key={img.id} {...img}></GifGridItem>\r\n                    })\r\n                }\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { getGifs } from \"../helpers/getGifs\";\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n    useEffect(() => {\r\n        getGifs(category).then(imgs => {\r\n            setTimeout(() => {\r\n                setstate({\r\n                    data: imgs,\r\n                    loading: false\r\n                });  \r\n            }, 3000);\r\n            \r\n        })\r\n    }, [category])\r\n\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n\r\n    const [categories, setcategories] = useState(['Dragon Ball']);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setcategories ={ setcategories}></AddCategory>\r\n            <hr />\r\n\r\n            \r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category => {\r\n                     return  <GifGrid key={category} category={category} />\r\n                    })\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(  \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}